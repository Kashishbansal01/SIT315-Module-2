#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

void quick_sort(int arr[], int start, int end) {
    if (start >= end) {
        return;
    }
    int pivot = arr[(start + end) / 2];
    int left = start;
    int right = end;
    while (left <= right) {
        while (arr[left] < pivot) {
            left++;
        }
        while (arr[right] > pivot) {
            right--;
        }
        if (left <= right) {
            swap(arr[left], arr[right]);
            left++;
            right--;
        }
    }
    #pragma omp task
    quick_sort(arr, start, right);

    #pragma omp task
    quick_sort(arr, left, end);
}

int main() {
    srand(time(NULL));
    int n = 10000; // Increased problem size
    int arr[n];
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    double start_time = omp_get_wtime(); // Using OpenMP timer
    #pragma omp parallel
    {
        #pragma omp single
        quick_sort(arr, 0, n-1);
    }
    double end_time = omp_get_wtime();
    double execution_time = end_time - start_time;
    double execution_time_micro = execution_time * 1000000;

    cout << "Execution time: " << execution_time_micro << " microseconds" << endl;

    return 0;
}
